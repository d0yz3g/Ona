"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
"""
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from core.fsm.base_handler import StateHandler
from core.services.payment_service import payment_service

logger = logging.getLogger(__name__)

class SubscriptionHandler(StateHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    """
    async def handle(self, update: Update):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
        """
        if update.callback_query and update.callback_query.data == "subscribe":
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
            await self.show_subscription_plans(update.callback_query)
        elif update.callback_query and update.callback_query.data.startswith("select_plan_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞
            plan_type = update.callback_query.data.replace("select_plan_", "")
            await self.process_plan_selection(update.callback_query, plan_type)
    
    async def show_subscription_plans(self, callback_query):
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            callback_query: CallbackQuery –æ—Ç Telegram
        """
        plans_text = (
            "–í—ã–±–µ—Ä–∏ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
            "üîπ –ë–∞–∑–æ–≤—ã–π (299 ‚ÇΩ/–º–µ—Å—è—Ü):\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –±–∞–∑–æ–≤—ã–º –º–µ–¥–∏—Ç–∞—Ü–∏—è–º\n"
            "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤\n"
            "‚Ä¢ –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "üî∏ –ü—Ä–µ–º–∏—É–º (599 ‚ÇΩ/–º–µ—Å—è—Ü):\n"
            "‚Ä¢ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
            "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–µ–¥–∏—Ç–∞—Ü–∏—è–º\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞
        keyboard = [
            [
                InlineKeyboardButton("–ë–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω", callback_data="select_plan_basic"),
                InlineKeyboardButton("–ü—Ä–µ–º–∏—É–º –ø–ª–∞–Ω", callback_data="select_plan_premium")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–ª–∞–Ω–∞–º–∏
        await callback_query.edit_message_text(
            text=plans_text,
            reply_markup=reply_markup
        )
    
    async def process_plan_selection(self, callback_query, plan_type):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            callback_query: CallbackQuery –æ—Ç Telegram
            plan_type: –¢–∏–ø –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ (basic/premium)
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment_info = await payment_service.create_payment(
                telegram_id=callback_query.from_user.id,
                plan_type=plan_type
            )
            
            if not payment_info:
                await callback_query.edit_message_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ
            keyboard = [[InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_info["payment_url"])]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
            await callback_query.edit_message_text(
                text=f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ {plan_type} –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞: {e}")
            await callback_query.edit_message_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            ) 