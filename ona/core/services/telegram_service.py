import logging
from telegram import Bot, Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from ona.config.settings import TELEGRAM_BOT_TOKEN
from ona.utils.state_router import state_router
from ona.core.fsm.handlers.registration_handler import STATES as REGISTRATION_STATES
from ona.core.fsm.handlers.profiling_psychology_handler import STATE as PSYCHOLOGY_STATE

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramService:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
    """
    def __init__(self):
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        self.app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    async def setup_handlers(self):
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.app.add_handler(MessageHandler(filters.VOICE, self.handle_voice_message))
        self.app.add_handler(CallbackQueryHandler(self.handle_callback))
        self.app.add_error_handler(self.error_handler)
        # DEBUG: –ª–æ–≥ –≤—Å–µ—Ö –∞–ø–¥–µ–π—Ç–æ–≤
        self.app.add_handler(MessageHandler(filters.ALL, self.debug_handler))

    async def debug_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        print(f"\nüì© DEBUG: –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram:\n{update}")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø ONA ‚Äì —Ç–≤–æ–π –ª–∏—á–Ω—ã–π AI-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è.\n\n"
            "–ì–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø—É—Ç—å —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ú® –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥", callback_data="start_profiling")]
            ])
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏. –ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
        await update.message.reply_text(f"–Ø –ø–æ–ª—É—á–∏–ª–∞ —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")

    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.info("–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.")
        await update.message.reply_text("–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∑–∂–µ.")

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(f"–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç: {query.data}")

    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {context.error}")

    async def start_polling(self):
        await self.setup_handlers()
        await self.app.run_polling()
