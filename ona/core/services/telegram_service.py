from telegram import Bot, Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from ona.config.settings import TELEGRAM_BOT_TOKEN
from ona.utils.state_router import state_router
from ona.core.fsm.handlers.registration_handler import STATES as REGISTRATION_STATES
from ona.core.fsm.handlers.profiling_psychology_handler import STATE as PSYCHOLOGY_STATE
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramService:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
    """
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Telegram –±–æ—Ç–∞
        """
        self.bot = Bot(token=TELEGRAM_BOT_TOKEN)
        self.app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
    async def setup_handlers(self):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(filters.VOICE, self.handle_voice_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
        self.app.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.app.add_error_handler(self.error_handler)
        #–£–î–ê–õ–ò–¢–¨ –ü–û–¢–û–ú
        self.app.add_handler(MessageHandler(filters.ALL, self.debug_handler))
    
    async def start_command(self, update: Update, context):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
        """
        user = update.effective_user
        
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø ONA ‚Äì —Ç–≤–æ–π –ª–∏—á–Ω—ã–π AI-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–æ—Å—Ç–∞ –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è.\n\n"
            "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥ –ª–∏—á–Ω–æ—Å—Ç–∏. "
            "–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Ä–∞—Å–∫—Ä—ã—Ç—å —Ç–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–∞–∑–≤–∏—Ç–∏—è.\n\n"
            "–ì–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å –ø—É—Ç—å —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ú® –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥", callback_data="start_profiling")]
            ])
        )
    
    async def help_command(self, update: Update, context):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
        """
        help_text = (
            "–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ ONA. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
            "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n\n"
            "–¢—ã –º–æ–∂–µ—à—å –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å —Ç–µ–±–µ."
        )
        await update.message.reply_text(help_text)
    
    async def handle_message(self, update: Update, context):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        user_message = update.message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await update.message.reply_text(f"–Ø –ø–æ–ª—É—á–∏–ª–∞ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")
    
    async def handle_voice_message(self, update: Update, context):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        voice_file = await update.message.voice.get_file()
        voice_bytes = await voice_file.download_as_bytearray()
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ –≤ —Ç–µ–∫—Å—Ç (–±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ)
        # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
        await update.message.reply_text("–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ –≤ —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.")
    
    async def handle_callback(self, update: Update, context):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
        """
        query = update.callback_query
        await query.answer()
        
        callback_data = query.data
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: {callback_data}")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        # –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await query.edit_message_text(text=f"–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç: {callback_data}")
    
    async def error_handler(self, update: Update, context):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        """
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {context.error}")
    async def debug_handler(self, update: Update, context):
    print(f"\nüì© –ü–†–ò–®–õ–û –û–ë–ù–û–í–õ–ï–ù–ò–ï: {update}")

    async def start_polling(self):
        """
        –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
        """
        await self.setup_handlers()
        await self.app.initialize()
        await self.app.start()
        await self.app.updater.start_polling()
    
    async def setup_webhook(self, webhook_url: str, secret_token: str = None):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        
        Args:
            webhook_url: URL –¥–ª—è webhook
            secret_token: –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        await self.setup_handlers()
        await self.app.initialize()
        await self.app.start()
        await self.bot.set_webhook(url=webhook_url, secret_token=secret_token)
    
    async def process_update(self, update_data: dict):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —á–µ—Ä–µ–∑ webhook
        
        Args:
            update_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
        """
        update = Update.de_json(update_data, self.bot)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ work-plan
        if update.message and update.message.text:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.handle_text_message(update)
        elif update.message and update.message.voice:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.handle_voice_message(update, None)
        elif update.callback_query:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
            await self.handle_callback_query(update.callback_query)
        else:
            # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
            await self.app.process_update(update)
    
    async def handle_text_message(self, update: Update):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ FSM
        """
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {update.message.text}")
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ FSM
        await state_router.route(update)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        user = await self.get_or_create_user(update.effective_user)
        await self.save_message(user["id"], update.message.text, is_user=True)
    
    async def handle_callback_query(self, callback_query):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏)
        """
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–Ω–æ–ø–∫–∏
        data = callback_query.data
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞: {data}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–Ω–æ–ø–æ–∫
        if data == "start_profiling":
            # –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥–∞ - –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            user_id = callback_query.from_user.id
            
            # –í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å work-plan –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ PROFILING_NATAL
            await state_router.set_user_state(user_id, REGISTRATION_STATES["PROFILING_NATAL"])
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            fake_update = Update(
                update_id=0,
                message=callback_query.message,
                effective_user=callback_query.from_user
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            await state_router.route(fake_update)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await callback_query.message.delete()
        elif data == "continue_profiling":
            # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥–∞ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—é
            user_id = callback_query.from_user.id
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state_router.set_user_state(user_id, PSYCHOLOGY_STATE)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
            await callback_query.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–º—É —ç—Ç–∞–ø—É –ø—Ä–æ—Ñ–∞–π–ª–∏–Ω–≥–∞ - –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –æ–ø—Ä–æ—Å–Ω–∏–∫—É. "
                "–≠—Ç–æ—Ç —ç—Ç–∞–ø –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Ç–≤–æ–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è."
            )
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            fake_update = Update(
                update_id=0,
                message=callback_query.message,
                effective_user=callback_query.from_user
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            await state_router.route(fake_update)
        elif data.startswith("answer_"):
            # –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            user_id = callback_query.from_user.id
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_state = await state_router.get_user_state(user_id)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            fake_update = Update(
                update_id=0,
                callback_query=callback_query,
                effective_user=callback_query.from_user
            )
            
            # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ FSM
            await state_router.route(fake_update)
        elif data == "next_stage":
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö)
            await callback_query.message.reply_text(
                "–°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
            )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        await callback_query.answer()
    
    async def get_or_create_user(self, effective_user):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            effective_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_id = effective_user.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
        return {
            "id": user_id,
            "username": effective_user.username,
            "first_name": effective_user.first_name,
            "last_name": effective_user.last_name,
        }
    
    async def save_message(self, user_id, text, is_user=True):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            is_user: –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —Ç–æ, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ó–∞–≥–ª—É—à–∫–∞ - –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text[:50]}...")
    
    async def stop(self):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
        """
        if self.app.updater:
            await self.app.updater.stop()
        await self.app.stop()
        await self.app.shutdown() 
